package com.kaustubh.ecommerce;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.os.BatteryManager;import android.os.Build;import android.support.annotation.RequiresApi;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import org.json.JSONObject;import java.util.HashMap;import java.util.Map;public class MainActivity extends AppCompatActivity {    EditText etUserName, etPassword;    Button btnLogin, btnEnquiry;    TextView tvSignIn;    StringRequest stringRequest;    ProgressDialog myDialog;    SharedPreferences sharedpreferences;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        sharedpreferences = getSharedPreferences(commonVariables.mypreference, Context.MODE_PRIVATE);        try {            if (sharedpreferences.contains(commonVariables.token)) {                String user = sharedpreferences.getString(commonVariables.user_type, "");                if (user.equals("1")) {                    startActivity(new Intent(this, Drower.class));                } else if (user.equals("3")) {                    startActivity(new Intent(this, VendorHome.class));                }                finish();            }        } catch (Exception e) {            e.printStackTrace();        }        getSupportActionBar().hide();        Window window = this.getWindow();        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            window.setStatusBarColor(ContextCompat.getColor(this, R.color.statusbarcolor));        }        etUserName = (EditText) findViewById(R.id.etUserName);        etPassword = (EditText) findViewById(R.id.etPassword);        tvSignIn = (TextView) findViewById(R.id.tvSignIn);        btnLogin = (Button) findViewById(R.id.btnLogin);        btnEnquiry = (Button) findViewById(R.id.btnEnquiry);        tvSignIn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(MainActivity.this, Drower.class));            }        });        btnLogin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!etUserName.getText().toString().equals("")) {                    if (!etPassword.getText().toString().equals("")) {                        sendData();                    } else {                        etPassword.setError("Enter Password");                    }                } else {                    etUserName.setError("Enter Password");                }            }        });        btnEnquiry.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(MainActivity.this, Drower.class));            }        });    }    public void sendData() {        myDialog = commonVariables.showProgressDialog(MainActivity.this, "Login ...");        stringRequest = new StringRequest(Request.Method.POST, "http://esmartfacilities.com/esmart/api/Login_Api/Log_in",//        stringRequest = new StringRequest(Request.Method.POST,  commonVariables.domain + "Login_Api/Log_in",                new Response.Listener<String>() {                    @Override                    public void onResponse(String response) {                        try {                            JSONObject obj = new JSONObject(response);                            String status = obj.getString("status");                            if (status.equals("pass")) {                                JSONObject respo = obj.getJSONObject("response");                                String message = respo.getString("message");                                String status1 = respo.getString("status");                                if (status1.equals("true")) {                                    JSONObject loginData = respo.getJSONObject("data");                                    String id = loginData.getString("id");                                    String name = loginData.getString("name");                                    String mobile = loginData.getString("mobile");                                    String user_type = loginData.getString("user_type");                                    JSONObject tokenObj = respo.getJSONObject("_token");                                    String _token = tokenObj.getString("_token");                                    SharedPreferences.Editor editor = sharedpreferences.edit();                                    editor.putString(commonVariables.Name, name);                                    editor.putString(commonVariables.Mobile, mobile);                                    editor.putString(commonVariables.token, _token);                                    editor.putString(commonVariables.customer_id, user_type);                                    editor.putString(commonVariables.user_type, user_type);                                    editor.commit();                                    if (user_type.equals("1")) {                                        Intent i = new Intent(MainActivity.this, Drower.class);                                        startActivity(i);                                    } else if (user_type.equals("3")) {                                        Intent i = new Intent(MainActivity.this, VendorHome.class);                                        startActivity(i);                                    }                                } else {                                    Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();                                }                            } else {                                Toast.makeText(MainActivity.this, "Login Fail", Toast.LENGTH_SHORT).show();                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                        myDialog.dismiss();                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Toast.makeText(MainActivity.this, "Login Fail", Toast.LENGTH_SHORT).show();                myDialog.dismiss();            }        }) {            @Override            public String getBodyContentType() {//                return "application/x-www-form-urlencoded";                return "application/x-www-form-urlencoded; charset=UTF-8";//                return "application/json; charset=utf-8";            }            @Override            protected Map<String, String> getParams() {                Map<String, String> params = new HashMap<String, String>();                params.put("email", etUserName.getText().toString());                params.put("password", etPassword.getText().toString());                return params;            }        };        stringRequest.setRetryPolicy(new DefaultRetryPolicy(                10000,                3,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        RequestQueue requestQueue = Volley.newRequestQueue(MainActivity.this);        requestQueue.getCache().clear();        requestQueue.add(stringRequest);    }    /*@SuppressLint("TrulyRandom")    public static void handleSSLHandshake() {        try {            TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {                public X509Certificate[] getAcceptedIssuers() {                    return new X509Certificate[0];                }                @Override                public void checkClientTrusted(X509Certificate[] certs, String authType) {                }                @Override                public void checkServerTrusted(X509Certificate[] certs, String authType) {                }            }};            SSLContext sc = SSLContext.getInstance("SSL");            sc.init(null, trustAllCerts, new SecureRandom());            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {                @Override                public boolean verify(String arg0, SSLSession arg1) {                    return true;                }            });        } catch (Exception ignored) {        }    }*/}