package com.kaustubh.ecommerce;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.os.Build;import android.os.Bundle;import android.support.annotation.RequiresApi;import android.support.v4.content.ContextCompat;import android.support.v4.view.GravityCompat;import android.support.v7.widget.DefaultItemAnimator;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.app.ActionBarDrawerToggle;import android.util.Base64;import android.util.Log;import android.view.MenuItem;import android.support.design.widget.NavigationView;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.Window;import android.view.WindowManager;import android.widget.Toast;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import org.json.JSONArray;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import ss.com.bannerslider.Slider;public class Drower extends AppCompatActivity        implements NavigationView.OnNavigationItemSelectedListener {    private List<ProductCategory> movieList = new ArrayList<>();    private RecyclerView rvCategoryList;    private MoviesAdapter mAdapter;    Slider slider;    PicassoImageLoadingService picassoImageLoadingService;    SharedPreferences sharedpreferences;    StringRequest stringRequest;    ProgressDialog myDialog;    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_drower);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        setTitle("e-smart");        sharedpreferences = getSharedPreferences(commonVariables.mypreference, Context.MODE_PRIVATE);        Window window = this.getWindow();        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);        window.setStatusBarColor(ContextCompat.getColor(this, R.color.statusbarcolor));        picassoImageLoadingService = new PicassoImageLoadingService(this);        slider = findViewById(R.id.banner_slider1);        slider.setAdapter(new MainSliderAdapter());        Slider.init(picassoImageLoadingService);        sendData();        DrawerLayout drawer = findViewById(R.id.drawer_layout);        NavigationView navigationView = findViewById(R.id.nav_view);        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawer.addDrawerListener(toggle);        toggle.syncState();        navigationView.setNavigationItemSelectedListener(this);        rvCategoryList = (RecyclerView) findViewById(R.id.rvCategoryList);        mAdapter = new MoviesAdapter(movieList, this);        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());        rvCategoryList.setLayoutManager(new GridLayoutManager(this, 3));        rvCategoryList.setItemAnimator(new DefaultItemAnimator());        rvCategoryList.setAdapter(mAdapter);    }    @Override    public void onBackPressed() {        DrawerLayout drawer = findViewById(R.id.drawer_layout);        if (drawer.isDrawerOpen(GravityCompat.START)) {            drawer.closeDrawer(GravityCompat.START);        } else {//            super.onBackPressed();            new AlertDialog.Builder(Drower.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle("Exit")                    .setMessage("Are you sure to exit")                    .setPositiveButton("yes", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            finish();                        }                    }).setNegativeButton("no", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            }).show();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.drower, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    @SuppressWarnings("StatementWithEmptyBody")    @Override    public boolean onNavigationItemSelected(MenuItem item) {        // Handle navigation view item clicks here.        int id = item.getItemId();        if (id == R.id.nav_home) {            // Handle the camera action        } else if (id == R.id.nav_MyBooking) {            startActivity(new Intent(Drower.this, MyBooking.class));        } else if (id == R.id.nav_Feedback) {            startActivity(new Intent(Drower.this, Feedback.class));        } else if (id == R.id.nav_Contact) {        } else if (id == R.id.nav_LogOut) {            new AlertDialog.Builder(Drower.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle("LogOut")                    .setMessage("Are you sure to Logout?")                    .setPositiveButton("yes", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            SharedPreferences.Editor editor = sharedpreferences.edit();                            editor.clear();                            editor.commit();                            Intent i = new Intent(Drower.this, MainActivity.class);                            startActivity(i);                            System.exit(0);                        }                    }).setNegativeButton("no", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            }).show();        }        DrawerLayout drawer = findViewById(R.id.drawer_layout);        drawer.closeDrawer(GravityCompat.START);        return true;    }    public void sendData() {        myDialog = commonVariables.showProgressDialog(Drower.this, "Getting Categories ...");        stringRequest = new StringRequest(Request.Method.GET, commonVariables.domain + "Service_Api/list",                new Response.Listener<String>() {                    @Override                    public void onResponse(String response) {                        try {                            JSONObject enqJO = new JSONObject(response);                            String status = enqJO.getString("status");                            if (status.equals("pass")) {                                JSONObject respo = enqJO.getJSONObject("response");                                String message = respo.getString("message");                                String status1 = respo.getString("status");                                if (status1.equals("true")) {                                    JSONObject result = respo.getJSONObject("result");                                    JSONArray inquiry = result.getJSONArray("services");                                    for (int i = 0; i < inquiry.length(); i++) {                                        JSONObject curr = inquiry.getJSONObject(i);                                        String id = curr.getString("id");                                        String name = curr.getString("name");                                        String description = curr.getString("description");                                        String image = curr.getString("image");                                        ProductCategory user = new ProductCategory();                                        user.setId(id);                                        user.setTitle(name);                                        user.setImg(image);                                        user.setSubCategory("No");                                        movieList.add(user);                                        mAdapter = new MoviesAdapter(movieList, Drower.this);                                        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());                                        rvCategoryList.setLayoutManager(new GridLayoutManager(Drower.this, 3));                                        rvCategoryList.setItemAnimator(new DefaultItemAnimator());                                        rvCategoryList.setAdapter(mAdapter);                                    }                                } else {                                    Toast.makeText(Drower.this, "No Record Found", Toast.LENGTH_SHORT).show();                                }                            } else {                                Toast.makeText(Drower.this, "Record Not Found", Toast.LENGTH_SHORT).show();                            }                            myDialog.dismiss();                        } catch (Exception e) {                            e.printStackTrace();                        }                        myDialog.dismiss();                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Toast.makeText(Drower.this, error.getMessage(), Toast.LENGTH_SHORT).show();                myDialog.dismiss();            }        }) {            @Override            public Map<String, String> getHeaders() {                HashMap<String, String> headers = new HashMap<String, String>();                headers.put("Authorization", "" + sharedpreferences.getString(commonVariables.token, ""));                return headers;            }        };        stringRequest.setRetryPolicy(new DefaultRetryPolicy(                10000,                3,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        RequestQueue requestQueue = Volley.newRequestQueue(Drower.this);        requestQueue.add(stringRequest);    }}